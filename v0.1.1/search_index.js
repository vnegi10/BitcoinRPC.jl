var documenterSearchIndex = {"docs":
[{"location":"#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"#Overview","page":"User Guide","title":"Overview","text":"","category":"section"},{"location":"","page":"User Guide","title":"User Guide","text":"BitcoinRPC.jl provides a Julia wrapper to Bitcoin's JSON-RPC API. Most of the  blockchain and mining RPCs  have been implemented in the form of callable functions. Depending on the operation, a function can return data (either as a DataFrame or Dict) or the associated HTTP response (Dict).","category":"page"},{"location":"#Available-functions","page":"User Guide","title":"Available functions","text":"","category":"section"},{"location":"","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"#Blockchain-RPCs","page":"User Guide","title":"Blockchain RPCs","text":"","category":"section"},{"location":"","page":"User Guide","title":"User Guide","text":"show_best_block_hash(auth::UserAuth)\n\nshow_block(auth::UserAuth; blockhash::String, verbosity::Int64 = 0)\n\nshow_blockchain_info(auth::UserAuth)\n\nshow_block_count(auth::UserAuth)\n\nshow_block_hash(auth::UserAuth; height::Int64 = 0)\n\nshow_block_header(auth::UserAuth; blockhash::String, verbose::Bool=true)\n\nshow_block_stats(auth::UserAuth; hashORheight::StringOrInt = 0, stats = \"\")\n\nshow_chain_tips(auth::UserAuth)\n\nshow_chain_txstats(auth::UserAuth; nblocks::Int64 = 144, blockhash::String = \"\")\n\nshow_difficulty(auth::UserAuth)\n\nshow_mempool_ancestors(auth::UserAuth; txid::String, verbose::Bool = true)\n\nshow_mempool_descendents(auth::UserAuth; txid::String, verbose::Bool = true)\n\nshow_mempool_entry(auth::UserAuth; txid::String)\n\nshow_mempool_info(auth::UserAuth)\n\nshow_mempool_raw(auth::UserAuth; verbose::Bool = false, mempool_sequence::Bool = false)\n\nshow_tx_out(auth::UserAuth; txid::String, n::Int64 = 1, include_mempool::Bool = true)\n\nshow_tx_out_setinfo(auth::UserAuth; hash_type::String = \"hash_serialized_2\")\n\nverify_chain(auth::UserAuth; checklevel::Int64 = 1, nblocks::Int64 = 10)","category":"page"},{"location":"#BitcoinRPC.show_best_block_hash-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_best_block_hash","text":"show_best_block_hash(auth::UserAuth)\n\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_block-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_block","text":"show_block(auth::UserAuth; blockhash::String, verbosity::Int64 = 0)\n\nGet block data depending on selected verbosity.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_blockchain_info-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_blockchain_info","text":"show_blockchain_info(auth::UserAuth)\n\nReturns an object containing various state info regarding blockchain processing.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_block_count-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_block_count","text":"show_block_count(auth::UserAuth)\n\nReturns the height of the most-work fully-validated chain.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_block_hash-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_block_hash","text":"show_block_hash(auth::UserAuth; height::Int64 = 0)\n\nReturns hash of block in best-block-chain at height provided.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_block_header-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_block_header","text":"show_block_header(auth::UserAuth; blockhash::String, verbose::Bool=true)\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader hash.\n\nIf verbose is true, returns an Object with information about blockheader hash.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_block_stats-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_block_stats","text":"show_block_stats(auth::UserAuth; hashORheight::StringOrInt = 0, stats = \"\")\n\nCompute per block statistics for a given window. All amounts are in satoshis.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_chain_tips-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_chain_tips","text":"show_chain_tips(auth::UserAuth)\n\nReturn information about all known tips in the block tree, including the main chain as well  as orphaned branches.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_chain_txstats-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_chain_txstats","text":"show_chain_txstats(auth::UserAuth; nblocks::Int64 = 144, blockhash::String = \"\")\n\nCompute statistics about the total number and rate of transactions in the chain for a  given search window.\n\nArguments\n\nauth::UserAuth : User credentials, e.g. auth = UserAuth(\"username\", \"password\", port)\n\nOptional keywords\n\nnblocks::Int64 : Size of the window in number of blocks, default is 144 (~ 1 day). If                     blockhash is not specified, stats are calculated until latest height.\nblockhash::String : The hash of the block that ends the window. Default is empty, which                       means stats are shown until latest height.\n\nExample\n\njulia-repl julia> show_chain_txstats(auth, nblocks = 1440, blockhash = show_block_hash(auth, height = 700_000)) Dict{String, Any} with 8 entries:   \"txcount\"                   => 669566382   \"window_tx_count\"           => 2512428   \"time\"                      => DateTime(\"2021-09-11T04:14:32\")   \"window_interval\"           => 821264   \"window_final_block_height\" => 700000   \"window_final_block_hash\"   => \"0000000000000000000590fc0f3eba193a278534220b2b37e9849e1a770ca959\"   \"window_block_count\"        => 1440   \"txrate\"                    => 3.05922`\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_difficulty-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_difficulty","text":"show_difficulty(auth::UserAuth)\n\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_mempool_ancestors-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_mempool_ancestors","text":"show_mempool_ancestors(auth::UserAuth; txid::String, verbose::Bool = true)\n\nIf txid is in the mempool, returns all in-mempool ancestors.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_mempool_descendents-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_mempool_descendents","text":"show_mempool_descendents(auth::UserAuth; txid::String, verbose::Bool = true)\n\nIf txid is in the mempool, returns all in-mempool descendants.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_mempool_entry-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_mempool_entry","text":"show_mempool_entry(auth::UserAuth; txid::String)\n\nReturns mempool data for a given transaction.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_mempool_info-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_mempool_info","text":"show_mempool_info(auth::UserAuth)\n\nReturns details on the active state of the TX memory pool.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_mempool_raw-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_mempool_raw","text":"show_mempool_raw(auth::UserAuth; verbose::Bool = false, mempool_sequence::Bool = false)\n\nReturns all transaction ids in memory pool as a json array of string transaction ids.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_tx_out-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_tx_out","text":"show_tx_out(auth::UserAuth; txid::String, n::Int64 = 1, include_mempool::Bool = true)\n\nReturns details about an unspent transaction output.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_tx_out_setinfo-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_tx_out_setinfo","text":"Returns statistics about the unspent transaction output set.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.verify_chain-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.verify_chain","text":"verify_chain(auth::UserAuth; checklevel::Int64 = 1, nblocks::Int64 = 10)\n\nVerifies blockchain database.\n\nArguments\n\nauth::UserAuth : User credentials, e.g. auth = UserAuth(\"username\", \"password\", port)\n\nOptional keywords\n\nchecklevel::Int64 : Control the thoroughness of block verification. Each level includes                        the checks of the previous levels. Default is level 1.                      \n                  - level 0 reads the blocks from disk\n                  - level 1 verifies block validity\n                  - level 2 verifies undo data\n                  - level 3 checks disconnection of tip blocks\n                  - level 4 tries to reconnect the blocks\nnblocks::Int64 : number of blocks to check, default is set to 10\n\nExample\n\njulia> verify_chain(auth, nblocks = 100)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Mining-RPCs","page":"User Guide","title":"Mining RPCs","text":"","category":"section"},{"location":"","page":"User Guide","title":"User Guide","text":"show_mining_info(auth::UserAuth)\n\nshow_network_hashps(auth::UserAuth; nblocks::Int64 = -1, height::Int64 = -1)","category":"page"},{"location":"#BitcoinRPC.show_mining_info-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_mining_info","text":"show_mining_info(auth::UserAuth)\n\nReturns a json object containing mining-related information.\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.show_network_hashps-Tuple{UserAuth}","page":"User Guide","title":"BitcoinRPC.show_network_hashps","text":"show_network_hashps(auth::UserAuth; nblocks::Int64 = -1, height::Int64 = -1)\n\nReturns the estimated network hashes per second based on the selected  number of blocks.\n\nArguments\n\nauth::UserAuth : User credentials, e.g. auth = UserAuth(\"username\", \"password\", port)\n\nOptional keywords\n\nnblocks::Int64 : Size of the window in number of blocks, used for estimation of the                     network hashes per second. Default is set to -1, which specifies                    since last difficulty change.\nheight::Int64 : Estimate the network speed at the time when a certain block was found.\n\nExample\n\njulia> show_network_hashps(auth, nblocks = 144)\n2.435873902493952e20\n\njulia> show_network_hashps(auth, height = 144)\n900742.2065335643\n\n\n\n\n\n","category":"method"},{"location":"#Perform-on-chain-analytics","page":"User Guide","title":"Perform on-chain analytics","text":"","category":"section"},{"location":"","page":"User Guide","title":"User Guide","text":"collect_block_stats(auth::UserAuth, block_start::Int64, block_end::Int64; stats = \"\")\n\ncollect_network_stats(auth::UserAuth, block_start::Int64, block_end::Int64)","category":"page"},{"location":"#BitcoinRPC.collect_block_stats-Tuple{UserAuth, Int64, Int64}","page":"User Guide","title":"BitcoinRPC.collect_block_stats","text":"collect_block_stats(auth::UserAuth, block_start::Int64, block_end::Int64)\n\nCollect statistics by iterating over a range of blocks.\n\nArguments\n\nauth::UserAuth : User credentials, e.g. auth = UserAuth(\"username\", \"password\", port)\nblock_start::Int64 : Starting block height\nblock_end::Int64 : Ending block height\n\nExample\n\njulia> collect_block_stats(auth, 700_000, 700_005)\n6×28 DataFrame\n Row │ avgfee      avgfeerate  avgtxsize  blockhash                          height  ins    maxfee      maxfeerate  maxtxsize  medianfe ⋯\n     │ Float64     Float64     Int64      String                             Int64   Int64  Float64     Float64     Int64      Float64  ⋯\n─────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.00012069      1.5e-7       1000  0000000000000000000590fc0f3eba19…  700000   6342  0.014          3.58e-6      86228   1.512e- ⋯\n   2 │ 2.078e-5        2.0e-8        956  00000000000000000002f39baabb00ff…  700001   2435  0.00153        2.51e-6      46044   3.36e-6\n   3 │ 4.082e-5        8.0e-8        627  00000000000000000001993b6b5e4e3d…  700002    729  0.00059549     3.16e-6      22613   1.363e-\n   4 │ 0.00025372      3.5e-7        981  000000000000000000055646f272b32b…  700003    716  0.025465       2.02e-6      35443   1.486e-\n   5 │ 5.484e-5        1.1e-7        831  0000000000000000000e360e05cb9d7b…  700004   1174  0.0028332      4.77e-6      53046   1.323e- ⋯\n\n\n\n\n\n","category":"method"},{"location":"#BitcoinRPC.collect_network_stats-Tuple{UserAuth, Int64, Int64}","page":"User Guide","title":"BitcoinRPC.collect_network_stats","text":"collect_network_stats(auth::UserAuth, block_start::Int64, block_end::Int64)\n\nCollect block and network statistics by iterating over a range of blocks.\n\nArguments\n\nauth::UserAuth : User credentials, e.g. auth = UserAuth(\"username\", \"password\", port)\nblock_start::Int64 : Starting block height\nblock_end::Int64 : Ending block height\n\nExample\n\njulia> collect_network_stats(auth, 700_000, 700_100)\n101×4 DataFrame\n Row │ height  time                 network_hash  difficulty \n     │ Int64   DateTime             Float64       Float64    \n─────┼───────────────────────────────────────────────────────\n   1 │ 700000  2021-09-11T04:14:32    1.29538e20  1.80963e13\n   2 │ 700001  2021-09-11T04:15:02    1.29813e20  1.81346e13\n   3 │ 700002  2021-09-11T04:17:07    1.30042e20  1.81666e13\n   4 │ 700003  2021-09-11T04:17:57    1.30306e20  1.82036e13\n   5 │ 700004  2021-09-11T04:20:45    1.30515e20  1.82327e13\n\n\n\n\n\n","category":"method"}]
}
